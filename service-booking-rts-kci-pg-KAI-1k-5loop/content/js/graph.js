/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 525.0, "minX": 0.0, "maxY": 17537.0, "series": [{"data": [[0.0, 525.0], [0.1, 859.0], [0.2, 900.0], [0.3, 1043.0], [0.4, 1149.0], [0.5, 1309.0], [0.6, 1465.0], [0.7, 1603.0], [0.8, 1692.0], [0.9, 1785.0], [1.0, 1932.0], [1.1, 2004.0], [1.2, 2087.0], [1.3, 2229.0], [1.4, 2258.0], [1.5, 2281.0], [1.6, 2323.0], [1.7, 2357.0], [1.8, 2384.0], [1.9, 2424.0], [2.0, 2462.0], [2.1, 2476.0], [2.2, 2500.0], [2.3, 2522.0], [2.4, 2536.0], [2.5, 2580.0], [2.6, 2586.0], [2.7, 2591.0], [2.8, 2607.0], [2.9, 2617.0], [3.0, 2632.0], [3.1, 2666.0], [3.2, 2709.0], [3.3, 2781.0], [3.4, 2819.0], [3.5, 2865.0], [3.6, 2876.0], [3.7, 2886.0], [3.8, 2913.0], [3.9, 2940.0], [4.0, 2978.0], [4.1, 2994.0], [4.2, 3035.0], [4.3, 3050.0], [4.4, 3079.0], [4.5, 3098.0], [4.6, 3116.0], [4.7, 3164.0], [4.8, 3200.0], [4.9, 3209.0], [5.0, 3236.0], [5.1, 3267.0], [5.2, 3279.0], [5.3, 3292.0], [5.4, 3307.0], [5.5, 3334.0], [5.6, 3338.0], [5.7, 3348.0], [5.8, 3360.0], [5.9, 3370.0], [6.0, 3383.0], [6.1, 3399.0], [6.2, 3426.0], [6.3, 3437.0], [6.4, 3448.0], [6.5, 3466.0], [6.6, 3489.0], [6.7, 3496.0], [6.8, 3517.0], [6.9, 3538.0], [7.0, 3543.0], [7.1, 3550.0], [7.2, 3568.0], [7.3, 3590.0], [7.4, 3614.0], [7.5, 3637.0], [7.6, 3652.0], [7.7, 3667.0], [7.8, 3680.0], [7.9, 3692.0], [8.0, 3703.0], [8.1, 3710.0], [8.2, 3716.0], [8.3, 3731.0], [8.4, 3736.0], [8.5, 3767.0], [8.6, 3779.0], [8.7, 3799.0], [8.8, 3821.0], [8.9, 3843.0], [9.0, 3854.0], [9.1, 3865.0], [9.2, 3872.0], [9.3, 3883.0], [9.4, 3897.0], [9.5, 3914.0], [9.6, 3931.0], [9.7, 3962.0], [9.8, 3986.0], [9.9, 4000.0], [10.0, 4031.0], [10.1, 4040.0], [10.2, 4057.0], [10.3, 4069.0], [10.4, 4083.0], [10.5, 4094.0], [10.6, 4110.0], [10.7, 4121.0], [10.8, 4129.0], [10.9, 4151.0], [11.0, 4171.0], [11.1, 4178.0], [11.2, 4190.0], [11.3, 4198.0], [11.4, 4208.0], [11.5, 4213.0], [11.6, 4218.0], [11.7, 4223.0], [11.8, 4228.0], [11.9, 4233.0], [12.0, 4236.0], [12.1, 4247.0], [12.2, 4261.0], [12.3, 4269.0], [12.4, 4281.0], [12.5, 4294.0], [12.6, 4299.0], [12.7, 4303.0], [12.8, 4314.0], [12.9, 4325.0], [13.0, 4328.0], [13.1, 4334.0], [13.2, 4341.0], [13.3, 4348.0], [13.4, 4351.0], [13.5, 4364.0], [13.6, 4369.0], [13.7, 4387.0], [13.8, 4396.0], [13.9, 4408.0], [14.0, 4418.0], [14.1, 4422.0], [14.2, 4426.0], [14.3, 4433.0], [14.4, 4440.0], [14.5, 4447.0], [14.6, 4450.0], [14.7, 4464.0], [14.8, 4490.0], [14.9, 4500.0], [15.0, 4508.0], [15.1, 4513.0], [15.2, 4523.0], [15.3, 4527.0], [15.4, 4531.0], [15.5, 4537.0], [15.6, 4547.0], [15.7, 4561.0], [15.8, 4575.0], [15.9, 4587.0], [16.0, 4598.0], [16.1, 4604.0], [16.2, 4609.0], [16.3, 4617.0], [16.4, 4622.0], [16.5, 4627.0], [16.6, 4640.0], [16.7, 4655.0], [16.8, 4667.0], [16.9, 4676.0], [17.0, 4678.0], [17.1, 4685.0], [17.2, 4687.0], [17.3, 4691.0], [17.4, 4694.0], [17.5, 4697.0], [17.6, 4702.0], [17.7, 4704.0], [17.8, 4711.0], [17.9, 4724.0], [18.0, 4735.0], [18.1, 4738.0], [18.2, 4742.0], [18.3, 4744.0], [18.4, 4747.0], [18.5, 4751.0], [18.6, 4756.0], [18.7, 4765.0], [18.8, 4770.0], [18.9, 4771.0], [19.0, 4775.0], [19.1, 4780.0], [19.2, 4786.0], [19.3, 4791.0], [19.4, 4795.0], [19.5, 4799.0], [19.6, 4805.0], [19.7, 4810.0], [19.8, 4818.0], [19.9, 4825.0], [20.0, 4834.0], [20.1, 4843.0], [20.2, 4852.0], [20.3, 4880.0], [20.4, 4894.0], [20.5, 4902.0], [20.6, 4926.0], [20.7, 4935.0], [20.8, 4954.0], [20.9, 4956.0], [21.0, 4964.0], [21.1, 4971.0], [21.2, 4977.0], [21.3, 4983.0], [21.4, 4991.0], [21.5, 4997.0], [21.6, 4999.0], [21.7, 5001.0], [21.8, 5011.0], [21.9, 5016.0], [22.0, 5020.0], [22.1, 5022.0], [22.2, 5033.0], [22.3, 5042.0], [22.4, 5049.0], [22.5, 5053.0], [22.6, 5057.0], [22.7, 5060.0], [22.8, 5061.0], [22.9, 5063.0], [23.0, 5064.0], [23.1, 5066.0], [23.2, 5068.0], [23.3, 5070.0], [23.4, 5071.0], [23.5, 5074.0], [23.6, 5075.0], [23.7, 5078.0], [23.8, 5081.0], [23.9, 5085.0], [24.0, 5090.0], [24.1, 5093.0], [24.2, 5094.0], [24.3, 5096.0], [24.4, 5101.0], [24.5, 5105.0], [24.6, 5106.0], [24.7, 5108.0], [24.8, 5110.0], [24.9, 5114.0], [25.0, 5117.0], [25.1, 5120.0], [25.2, 5123.0], [25.3, 5124.0], [25.4, 5126.0], [25.5, 5127.0], [25.6, 5129.0], [25.7, 5132.0], [25.8, 5135.0], [25.9, 5136.0], [26.0, 5139.0], [26.1, 5140.0], [26.2, 5141.0], [26.3, 5143.0], [26.4, 5145.0], [26.5, 5147.0], [26.6, 5148.0], [26.7, 5151.0], [26.8, 5152.0], [26.9, 5153.0], [27.0, 5155.0], [27.1, 5156.0], [27.2, 5157.0], [27.3, 5159.0], [27.4, 5161.0], [27.5, 5163.0], [27.6, 5165.0], [27.7, 5165.0], [27.8, 5168.0], [27.9, 5169.0], [28.0, 5171.0], [28.1, 5172.0], [28.2, 5173.0], [28.3, 5176.0], [28.4, 5178.0], [28.5, 5180.0], [28.6, 5184.0], [28.7, 5186.0], [28.8, 5188.0], [28.9, 5191.0], [29.0, 5194.0], [29.1, 5196.0], [29.2, 5197.0], [29.3, 5198.0], [29.4, 5201.0], [29.5, 5203.0], [29.6, 5206.0], [29.7, 5212.0], [29.8, 5215.0], [29.9, 5218.0], [30.0, 5221.0], [30.1, 5223.0], [30.2, 5232.0], [30.3, 5234.0], [30.4, 5236.0], [30.5, 5238.0], [30.6, 5240.0], [30.7, 5244.0], [30.8, 5246.0], [30.9, 5248.0], [31.0, 5251.0], [31.1, 5254.0], [31.2, 5256.0], [31.3, 5258.0], [31.4, 5260.0], [31.5, 5263.0], [31.6, 5264.0], [31.7, 5265.0], [31.8, 5267.0], [31.9, 5269.0], [32.0, 5272.0], [32.1, 5274.0], [32.2, 5277.0], [32.3, 5280.0], [32.4, 5283.0], [32.5, 5285.0], [32.6, 5289.0], [32.7, 5291.0], [32.8, 5294.0], [32.9, 5297.0], [33.0, 5297.0], [33.1, 5299.0], [33.2, 5301.0], [33.3, 5303.0], [33.4, 5303.0], [33.5, 5306.0], [33.6, 5307.0], [33.7, 5308.0], [33.8, 5311.0], [33.9, 5313.0], [34.0, 5315.0], [34.1, 5316.0], [34.2, 5316.0], [34.3, 5319.0], [34.4, 5320.0], [34.5, 5321.0], [34.6, 5323.0], [34.7, 5324.0], [34.8, 5325.0], [34.9, 5327.0], [35.0, 5328.0], [35.1, 5328.0], [35.2, 5330.0], [35.3, 5332.0], [35.4, 5334.0], [35.5, 5335.0], [35.6, 5337.0], [35.7, 5338.0], [35.8, 5339.0], [35.9, 5340.0], [36.0, 5340.0], [36.1, 5341.0], [36.2, 5342.0], [36.3, 5342.0], [36.4, 5343.0], [36.5, 5344.0], [36.6, 5347.0], [36.7, 5348.0], [36.8, 5349.0], [36.9, 5351.0], [37.0, 5355.0], [37.1, 5355.0], [37.2, 5357.0], [37.3, 5357.0], [37.4, 5359.0], [37.5, 5360.0], [37.6, 5361.0], [37.7, 5361.0], [37.8, 5363.0], [37.9, 5363.0], [38.0, 5364.0], [38.1, 5365.0], [38.2, 5366.0], [38.3, 5367.0], [38.4, 5367.0], [38.5, 5368.0], [38.6, 5369.0], [38.7, 5371.0], [38.8, 5372.0], [38.9, 5372.0], [39.0, 5374.0], [39.1, 5375.0], [39.2, 5377.0], [39.3, 5378.0], [39.4, 5379.0], [39.5, 5381.0], [39.6, 5381.0], [39.7, 5383.0], [39.8, 5385.0], [39.9, 5387.0], [40.0, 5387.0], [40.1, 5390.0], [40.2, 5390.0], [40.3, 5392.0], [40.4, 5394.0], [40.5, 5395.0], [40.6, 5396.0], [40.7, 5399.0], [40.8, 5401.0], [40.9, 5403.0], [41.0, 5404.0], [41.1, 5407.0], [41.2, 5409.0], [41.3, 5411.0], [41.4, 5413.0], [41.5, 5415.0], [41.6, 5417.0], [41.7, 5419.0], [41.8, 5421.0], [41.9, 5422.0], [42.0, 5424.0], [42.1, 5425.0], [42.2, 5427.0], [42.3, 5427.0], [42.4, 5431.0], [42.5, 5434.0], [42.6, 5436.0], [42.7, 5438.0], [42.8, 5438.0], [42.9, 5439.0], [43.0, 5441.0], [43.1, 5442.0], [43.2, 5444.0], [43.3, 5447.0], [43.4, 5448.0], [43.5, 5450.0], [43.6, 5451.0], [43.7, 5452.0], [43.8, 5453.0], [43.9, 5453.0], [44.0, 5454.0], [44.1, 5456.0], [44.2, 5456.0], [44.3, 5457.0], [44.4, 5458.0], [44.5, 5459.0], [44.6, 5460.0], [44.7, 5461.0], [44.8, 5461.0], [44.9, 5463.0], [45.0, 5465.0], [45.1, 5465.0], [45.2, 5467.0], [45.3, 5468.0], [45.4, 5469.0], [45.5, 5469.0], [45.6, 5471.0], [45.7, 5472.0], [45.8, 5474.0], [45.9, 5474.0], [46.0, 5476.0], [46.1, 5478.0], [46.2, 5479.0], [46.3, 5481.0], [46.4, 5482.0], [46.5, 5483.0], [46.6, 5486.0], [46.7, 5487.0], [46.8, 5488.0], [46.9, 5489.0], [47.0, 5490.0], [47.1, 5493.0], [47.2, 5495.0], [47.3, 5498.0], [47.4, 5499.0], [47.5, 5502.0], [47.6, 5503.0], [47.7, 5504.0], [47.8, 5506.0], [47.9, 5507.0], [48.0, 5508.0], [48.1, 5510.0], [48.2, 5513.0], [48.3, 5515.0], [48.4, 5518.0], [48.5, 5519.0], [48.6, 5521.0], [48.7, 5523.0], [48.8, 5525.0], [48.9, 5526.0], [49.0, 5527.0], [49.1, 5531.0], [49.2, 5533.0], [49.3, 5534.0], [49.4, 5540.0], [49.5, 5544.0], [49.6, 5554.0], [49.7, 5559.0], [49.8, 5575.0], [49.9, 5584.0], [50.0, 5606.0], [50.1, 5614.0], [50.2, 5631.0], [50.3, 5653.0], [50.4, 5677.0], [50.5, 5690.0], [50.6, 5702.0], [50.7, 5705.0], [50.8, 5709.0], [50.9, 5709.0], [51.0, 5712.0], [51.1, 5715.0], [51.2, 5720.0], [51.3, 5723.0], [51.4, 5726.0], [51.5, 5730.0], [51.6, 5734.0], [51.7, 5740.0], [51.8, 5743.0], [51.9, 5746.0], [52.0, 5753.0], [52.1, 5769.0], [52.2, 5774.0], [52.3, 5778.0], [52.4, 5781.0], [52.5, 5788.0], [52.6, 5796.0], [52.7, 5798.0], [52.8, 5801.0], [52.9, 5807.0], [53.0, 5815.0], [53.1, 5819.0], [53.2, 5822.0], [53.3, 5830.0], [53.4, 5837.0], [53.5, 5843.0], [53.6, 5852.0], [53.7, 5861.0], [53.8, 5864.0], [53.9, 5871.0], [54.0, 5884.0], [54.1, 5886.0], [54.2, 5889.0], [54.3, 5893.0], [54.4, 5897.0], [54.5, 5898.0], [54.6, 5901.0], [54.7, 5903.0], [54.8, 5905.0], [54.9, 5923.0], [55.0, 5934.0], [55.1, 5939.0], [55.2, 5943.0], [55.3, 5945.0], [55.4, 5953.0], [55.5, 5956.0], [55.6, 5963.0], [55.7, 5968.0], [55.8, 5970.0], [55.9, 5974.0], [56.0, 5978.0], [56.1, 5982.0], [56.2, 5984.0], [56.3, 5989.0], [56.4, 5991.0], [56.5, 5993.0], [56.6, 5994.0], [56.7, 5996.0], [56.8, 5998.0], [56.9, 5999.0], [57.0, 6001.0], [57.1, 6005.0], [57.2, 6012.0], [57.3, 6017.0], [57.4, 6023.0], [57.5, 6028.0], [57.6, 6032.0], [57.7, 6036.0], [57.8, 6045.0], [57.9, 6054.0], [58.0, 6061.0], [58.1, 6069.0], [58.2, 6084.0], [58.3, 6094.0], [58.4, 6099.0], [58.5, 6108.0], [58.6, 6123.0], [58.7, 6137.0], [58.8, 6154.0], [58.9, 6169.0], [59.0, 6178.0], [59.1, 6191.0], [59.2, 6194.0], [59.3, 6206.0], [59.4, 6213.0], [59.5, 6223.0], [59.6, 6235.0], [59.7, 6243.0], [59.8, 6253.0], [59.9, 6264.0], [60.0, 6274.0], [60.1, 6284.0], [60.2, 6288.0], [60.3, 6292.0], [60.4, 6296.0], [60.5, 6314.0], [60.6, 6340.0], [60.7, 6373.0], [60.8, 6419.0], [60.9, 6458.0], [61.0, 6516.0], [61.1, 6580.0], [61.2, 6634.0], [61.3, 6678.0], [61.4, 6739.0], [61.5, 6802.0], [61.6, 6850.0], [61.7, 6882.0], [61.8, 6892.0], [61.9, 6920.0], [62.0, 6953.0], [62.1, 6989.0], [62.2, 7012.0], [62.3, 7069.0], [62.4, 7077.0], [62.5, 7124.0], [62.6, 7137.0], [62.7, 7173.0], [62.8, 7229.0], [62.9, 7267.0], [63.0, 7292.0], [63.1, 7323.0], [63.2, 7353.0], [63.3, 7380.0], [63.4, 7432.0], [63.5, 7463.0], [63.6, 7512.0], [63.7, 7564.0], [63.8, 7596.0], [63.9, 7629.0], [64.0, 7679.0], [64.1, 7713.0], [64.2, 7723.0], [64.3, 7792.0], [64.4, 7830.0], [64.5, 7890.0], [64.6, 7962.0], [64.7, 7976.0], [64.8, 8015.0], [64.9, 8074.0], [65.0, 8139.0], [65.1, 8173.0], [65.2, 8228.0], [65.3, 8278.0], [65.4, 8351.0], [65.5, 8393.0], [65.6, 8444.0], [65.7, 8502.0], [65.8, 8525.0], [65.9, 8587.0], [66.0, 8635.0], [66.1, 8692.0], [66.2, 8709.0], [66.3, 8728.0], [66.4, 8771.0], [66.5, 8790.0], [66.6, 8831.0], [66.7, 8862.0], [66.8, 8930.0], [66.9, 8972.0], [67.0, 9021.0], [67.1, 9047.0], [67.2, 9080.0], [67.3, 9146.0], [67.4, 9163.0], [67.5, 9185.0], [67.6, 9246.0], [67.7, 9281.0], [67.8, 9305.0], [67.9, 9366.0], [68.0, 9465.0], [68.1, 9513.0], [68.2, 9534.0], [68.3, 9558.0], [68.4, 9615.0], [68.5, 9632.0], [68.6, 9658.0], [68.7, 9719.0], [68.8, 9752.0], [68.9, 9786.0], [69.0, 9826.0], [69.1, 9861.0], [69.2, 9935.0], [69.3, 9998.0], [69.4, 10027.0], [69.5, 10069.0], [69.6, 10127.0], [69.7, 10162.0], [69.8, 10222.0], [69.9, 10255.0], [70.0, 10325.0], [70.1, 10354.0], [70.2, 10424.0], [70.3, 10464.0], [70.4, 10492.0], [70.5, 10536.0], [70.6, 10571.0], [70.7, 10590.0], [70.8, 10645.0], [70.9, 10659.0], [71.0, 10687.0], [71.1, 10778.0], [71.2, 10822.0], [71.3, 10894.0], [71.4, 10912.0], [71.5, 10945.0], [71.6, 10957.0], [71.7, 10965.0], [71.8, 10991.0], [71.9, 11007.0], [72.0, 11030.0], [72.1, 11050.0], [72.2, 11063.0], [72.3, 11087.0], [72.4, 11109.0], [72.5, 11125.0], [72.6, 11164.0], [72.7, 11193.0], [72.8, 11218.0], [72.9, 11238.0], [73.0, 11281.0], [73.1, 11352.0], [73.2, 11372.0], [73.3, 11406.0], [73.4, 11431.0], [73.5, 11442.0], [73.6, 11474.0], [73.7, 11516.0], [73.8, 11548.0], [73.9, 11578.0], [74.0, 11606.0], [74.1, 11635.0], [74.2, 11667.0], [74.3, 11676.0], [74.4, 11691.0], [74.5, 11709.0], [74.6, 11734.0], [74.7, 11758.0], [74.8, 11793.0], [74.9, 11826.0], [75.0, 11856.0], [75.1, 11910.0], [75.2, 11941.0], [75.3, 11952.0], [75.4, 11969.0], [75.5, 11989.0], [75.6, 12005.0], [75.7, 12024.0], [75.8, 12056.0], [75.9, 12070.0], [76.0, 12090.0], [76.1, 12107.0], [76.2, 12117.0], [76.3, 12128.0], [76.4, 12150.0], [76.5, 12156.0], [76.6, 12174.0], [76.7, 12185.0], [76.8, 12206.0], [76.9, 12214.0], [77.0, 12225.0], [77.1, 12239.0], [77.2, 12249.0], [77.3, 12269.0], [77.4, 12292.0], [77.5, 12304.0], [77.6, 12317.0], [77.7, 12328.0], [77.8, 12350.0], [77.9, 12367.0], [78.0, 12391.0], [78.1, 12415.0], [78.2, 12430.0], [78.3, 12448.0], [78.4, 12451.0], [78.5, 12463.0], [78.6, 12480.0], [78.7, 12514.0], [78.8, 12535.0], [78.9, 12563.0], [79.0, 12586.0], [79.1, 12647.0], [79.2, 12671.0], [79.3, 12702.0], [79.4, 12710.0], [79.5, 12743.0], [79.6, 12753.0], [79.7, 12777.0], [79.8, 12812.0], [79.9, 12828.0], [80.0, 12859.0], [80.1, 12883.0], [80.2, 12925.0], [80.3, 12944.0], [80.4, 12967.0], [80.5, 12983.0], [80.6, 12993.0], [80.7, 13011.0], [80.8, 13024.0], [80.9, 13039.0], [81.0, 13049.0], [81.1, 13071.0], [81.2, 13085.0], [81.3, 13122.0], [81.4, 13154.0], [81.5, 13163.0], [81.6, 13170.0], [81.7, 13187.0], [81.8, 13215.0], [81.9, 13224.0], [82.0, 13249.0], [82.1, 13268.0], [82.2, 13283.0], [82.3, 13300.0], [82.4, 13317.0], [82.5, 13344.0], [82.6, 13362.0], [82.7, 13380.0], [82.8, 13419.0], [82.9, 13437.0], [83.0, 13461.0], [83.1, 13471.0], [83.2, 13501.0], [83.3, 13518.0], [83.4, 13539.0], [83.5, 13550.0], [83.6, 13576.0], [83.7, 13609.0], [83.8, 13628.0], [83.9, 13638.0], [84.0, 13665.0], [84.1, 13677.0], [84.2, 13695.0], [84.3, 13720.0], [84.4, 13741.0], [84.5, 13777.0], [84.6, 13791.0], [84.7, 13815.0], [84.8, 13826.0], [84.9, 13839.0], [85.0, 13855.0], [85.1, 13871.0], [85.2, 13891.0], [85.3, 13911.0], [85.4, 13929.0], [85.5, 13938.0], [85.6, 13948.0], [85.7, 13975.0], [85.8, 13989.0], [85.9, 14021.0], [86.0, 14069.0], [86.1, 14080.0], [86.2, 14094.0], [86.3, 14103.0], [86.4, 14126.0], [86.5, 14130.0], [86.6, 14154.0], [86.7, 14161.0], [86.8, 14171.0], [86.9, 14183.0], [87.0, 14194.0], [87.1, 14205.0], [87.2, 14215.0], [87.3, 14233.0], [87.4, 14245.0], [87.5, 14263.0], [87.6, 14288.0], [87.7, 14298.0], [87.8, 14314.0], [87.9, 14338.0], [88.0, 14358.0], [88.1, 14365.0], [88.2, 14386.0], [88.3, 14402.0], [88.4, 14428.0], [88.5, 14467.0], [88.6, 14484.0], [88.7, 14502.0], [88.8, 14522.0], [88.9, 14543.0], [89.0, 14554.0], [89.1, 14570.0], [89.2, 14581.0], [89.3, 14595.0], [89.4, 14601.0], [89.5, 14615.0], [89.6, 14628.0], [89.7, 14654.0], [89.8, 14665.0], [89.9, 14676.0], [90.0, 14685.0], [90.1, 14697.0], [90.2, 14704.0], [90.3, 14724.0], [90.4, 14736.0], [90.5, 14755.0], [90.6, 14771.0], [90.7, 14798.0], [90.8, 14817.0], [90.9, 14854.0], [91.0, 14865.0], [91.1, 14878.0], [91.2, 14882.0], [91.3, 14896.0], [91.4, 14921.0], [91.5, 14937.0], [91.6, 14944.0], [91.7, 14957.0], [91.8, 14965.0], [91.9, 14973.0], [92.0, 14985.0], [92.1, 14996.0], [92.2, 15013.0], [92.3, 15019.0], [92.4, 15025.0], [92.5, 15030.0], [92.6, 15047.0], [92.7, 15057.0], [92.8, 15064.0], [92.9, 15071.0], [93.0, 15075.0], [93.1, 15086.0], [93.2, 15093.0], [93.3, 15105.0], [93.4, 15118.0], [93.5, 15142.0], [93.6, 15163.0], [93.7, 15182.0], [93.8, 15191.0], [93.9, 15198.0], [94.0, 15212.0], [94.1, 15218.0], [94.2, 15232.0], [94.3, 15243.0], [94.4, 15254.0], [94.5, 15270.0], [94.6, 15286.0], [94.7, 15303.0], [94.8, 15320.0], [94.9, 15327.0], [95.0, 15333.0], [95.1, 15336.0], [95.2, 15342.0], [95.3, 15356.0], [95.4, 15365.0], [95.5, 15377.0], [95.6, 15419.0], [95.7, 15449.0], [95.8, 15462.0], [95.9, 15480.0], [96.0, 15486.0], [96.1, 15511.0], [96.2, 15558.0], [96.3, 15573.0], [96.4, 15585.0], [96.5, 15599.0], [96.6, 15604.0], [96.7, 15615.0], [96.8, 15635.0], [96.9, 15644.0], [97.0, 15651.0], [97.1, 15669.0], [97.2, 15682.0], [97.3, 15697.0], [97.4, 15710.0], [97.5, 15735.0], [97.6, 15754.0], [97.7, 15785.0], [97.8, 15820.0], [97.9, 15853.0], [98.0, 15877.0], [98.1, 15898.0], [98.2, 15935.0], [98.3, 15964.0], [98.4, 15977.0], [98.5, 15993.0], [98.6, 16006.0], [98.7, 16013.0], [98.8, 16035.0], [98.9, 16099.0], [99.0, 16117.0], [99.1, 16134.0], [99.2, 16176.0], [99.3, 16224.0], [99.4, 16314.0], [99.5, 16392.0], [99.6, 16470.0], [99.7, 16722.0], [99.8, 17071.0], [99.9, 17156.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 382.0, "series": [{"data": [[500.0, 2.0], [700.0, 1.0], [800.0, 7.0], [900.0, 3.0], [1000.0, 3.0], [1100.0, 7.0], [1200.0, 1.0], [1300.0, 5.0], [1400.0, 2.0], [1500.0, 3.0], [1600.0, 7.0], [1700.0, 4.0], [1800.0, 3.0], [1900.0, 6.0], [2000.0, 6.0], [2100.0, 3.0], [2200.0, 13.0], [2300.0, 15.0], [2400.0, 18.0], [2500.0, 27.0], [2600.0, 23.0], [2700.0, 10.0], [2800.0, 18.0], [2900.0, 18.0], [3000.0, 22.0], [3100.0, 13.0], [3200.0, 28.0], [3300.0, 38.0], [3400.0, 31.0], [3500.0, 30.0], [3700.0, 37.0], [3600.0, 32.0], [3800.0, 35.0], [3900.0, 24.0], [4000.0, 33.0], [4100.0, 39.0], [4200.0, 64.0], [4300.0, 62.0], [4600.0, 77.0], [4500.0, 57.0], [4400.0, 52.0], [4700.0, 99.0], [4800.0, 45.0], [5000.0, 136.0], [5100.0, 249.0], [4900.0, 60.0], [5300.0, 382.0], [5200.0, 188.0], [5400.0, 333.0], [5500.0, 129.0], [5600.0, 27.0], [5700.0, 112.0], [5800.0, 88.0], [5900.0, 119.0], [6000.0, 74.0], [6100.0, 43.0], [6200.0, 60.0], [6300.0, 15.0], [6500.0, 7.0], [6600.0, 12.0], [6400.0, 10.0], [6800.0, 19.0], [6900.0, 16.0], [6700.0, 4.0], [7100.0, 15.0], [7000.0, 16.0], [7200.0, 14.0], [7300.0, 15.0], [7400.0, 12.0], [7500.0, 12.0], [7600.0, 13.0], [7700.0, 12.0], [7900.0, 10.0], [7800.0, 12.0], [8100.0, 10.0], [8000.0, 11.0], [8300.0, 7.0], [8700.0, 20.0], [8200.0, 10.0], [8600.0, 11.0], [8400.0, 9.0], [8500.0, 12.0], [9200.0, 12.0], [8800.0, 9.0], [9100.0, 13.0], [9000.0, 15.0], [8900.0, 12.0], [9400.0, 6.0], [9300.0, 9.0], [9500.0, 15.0], [9600.0, 16.0], [9700.0, 13.0], [9800.0, 12.0], [9900.0, 7.0], [10200.0, 9.0], [10100.0, 10.0], [10000.0, 12.0], [10300.0, 12.0], [10700.0, 8.0], [10600.0, 16.0], [10400.0, 15.0], [10500.0, 12.0], [10900.0, 24.0], [11000.0, 25.0], [11100.0, 20.0], [11200.0, 14.0], [10800.0, 8.0], [11600.0, 23.0], [11700.0, 19.0], [11400.0, 20.0], [11300.0, 13.0], [11500.0, 16.0], [12100.0, 36.0], [12200.0, 33.0], [12000.0, 26.0], [11800.0, 12.0], [11900.0, 24.0], [12600.0, 14.0], [12400.0, 32.0], [12700.0, 24.0], [12300.0, 29.0], [12500.0, 17.0], [13000.0, 31.0], [12800.0, 19.0], [13300.0, 23.0], [12900.0, 23.0], [13100.0, 25.0], [13200.0, 28.0], [13400.0, 22.0], [13500.0, 23.0], [13800.0, 30.0], [13600.0, 28.0], [13700.0, 22.0], [14000.0, 24.0], [13900.0, 28.0], [14200.0, 33.0], [14100.0, 38.0], [14300.0, 29.0], [14400.0, 20.0], [14500.0, 34.0], [14700.0, 30.0], [14600.0, 38.0], [14800.0, 29.0], [14900.0, 41.0], [15000.0, 57.0], [15100.0, 32.0], [15300.0, 44.0], [15200.0, 38.0], [15400.0, 25.0], [15500.0, 23.0], [15600.0, 42.0], [15700.0, 20.0], [15800.0, 18.0], [16000.0, 19.0], [15900.0, 21.0], [16200.0, 5.0], [16100.0, 17.0], [16300.0, 9.0], [16500.0, 2.0], [16700.0, 1.0], [16600.0, 1.0], [17300.0, 1.0], [16900.0, 1.0], [17000.0, 4.0], [17200.0, 1.0], [16400.0, 5.0], [17100.0, 6.0], [17500.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 17500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 31.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 4969.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 31.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 4969.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 678.5266903914596, "minX": 1.72604856E12, "maxY": 777.3075335397313, "series": [{"data": [[1.72604856E12, 678.5266903914596], [1.72604862E12, 777.3075335397313]], "isOverall": false, "label": "testuser1k-5loop", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72604862E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 731.6666666666666, "minX": 1.0, "maxY": 15800.799999999997, "series": [{"data": [[2.0, 2281.0], [3.0, 2351.0], [4.0, 2372.0], [5.0, 2277.0], [6.0, 2323.0], [7.0, 2390.0], [8.0, 2373.0], [9.0, 2367.0], [10.0, 2462.0], [11.0, 2360.0], [12.0, 2567.0], [13.0, 2357.0], [14.0, 2565.0], [15.0, 2508.0], [16.0, 2606.0], [17.0, 2791.0], [18.0, 2876.0], [19.0, 2685.0], [21.0, 2837.5], [22.0, 2950.0], [23.0, 2911.0], [24.0, 2994.0], [25.0, 2895.0], [26.0, 2993.0], [27.0, 2987.0], [28.0, 2987.0], [29.0, 2983.0], [30.0, 3065.0], [31.0, 3212.0], [33.0, 2041.0], [32.0, 3116.0], [35.0, 2063.5], [34.0, 3292.0], [36.0, 859.0], [37.0, 3232.0], [38.0, 2076.0], [39.0, 3215.0], [41.0, 3200.0], [40.0, 3337.0], [42.0, 2122.5], [43.0, 3274.0], [45.0, 3333.0], [44.0, 3292.0], [47.0, 1730.0], [46.0, 3348.0], [49.0, 3369.0], [48.0, 3370.0], [51.0, 3554.0], [50.0, 3546.0], [53.0, 2122.5], [52.0, 3637.0], [54.0, 731.6666666666666], [55.0, 2447.0], [57.0, 3426.0], [56.0, 3401.0], [59.0, 3502.0], [60.0, 1912.5], [61.0, 2399.5], [63.0, 3557.0], [62.0, 3613.0], [64.0, 2596.0], [66.0, 2301.5], [67.0, 3618.0], [65.0, 3546.0], [68.0, 1012.0], [71.0, 2361.0], [70.0, 3609.0], [69.0, 3643.0], [74.0, 2429.0], [75.0, 2816.5], [73.0, 3669.0], [72.0, 3667.0], [76.0, 1085.0], [77.0, 2836.0], [78.0, 2342.75], [79.0, 3690.0], [82.0, 2314.5], [83.0, 3791.0], [81.0, 3714.0], [80.0, 3714.0], [84.0, 2645.5], [87.0, 3703.0], [86.0, 3726.0], [85.0, 3775.0], [89.0, 3131.5], [91.0, 2503.0], [90.0, 3697.0], [88.0, 3700.0], [93.0, 3045.0], [94.0, 2547.0], [95.0, 3821.0], [98.0, 3192.5], [99.0, 2588.0], [97.0, 3851.0], [96.0, 3821.0], [100.0, 3192.0], [101.0, 2850.5], [103.0, 3135.5], [102.0, 3909.0], [105.0, 2868.0], [106.0, 2840.5], [107.0, 3473.0], [104.0, 4027.0], [109.0, 3521.5], [111.0, 2747.0], [110.0, 4062.0], [108.0, 4019.0], [113.0, 3058.0], [114.0, 4147.0], [112.0, 4069.0], [118.0, 3068.5], [119.0, 4221.0], [117.0, 4209.0], [120.0, 3062.5], [123.0, 1675.0], [122.0, 4247.0], [121.0, 4329.0], [124.0, 3763.3333333333335], [125.0, 3137.5], [126.0, 3269.5], [127.0, 4288.0], [128.0, 3088.0], [129.0, 3287.5], [130.0, 3716.0], [131.0, 3484.5], [134.0, 1278.5], [135.0, 932.0], [133.0, 4333.0], [132.0, 4327.0], [136.0, 1581.5], [137.0, 1729.5], [140.0, 3193.5], [142.0, 3759.5], [143.0, 3419.5], [141.0, 1183.0], [139.0, 4351.0], [138.0, 4369.0], [145.0, 3859.0], [146.0, 3421.6666666666665], [149.0, 2614.0], [150.0, 2269.6666666666665], [151.0, 2004.0], [148.0, 1465.0], [147.0, 1471.0], [144.0, 4348.0], [153.0, 2920.0], [156.0, 2510.0], [157.0, 2274.5], [158.0, 2893.6666666666665], [159.0, 4325.0], [155.0, 2091.0], [152.0, 4361.0], [160.0, 2554.5], [164.0, 3160.25], [167.0, 4316.0], [166.0, 4585.0], [165.0, 4571.0], [162.0, 2258.0], [161.0, 2192.0], [168.0, 3639.5], [171.0, 3547.5], [173.0, 3701.0], [175.0, 3725.0], [174.0, 4617.0], [172.0, 4632.0], [170.0, 4547.0], [169.0, 4455.0], [177.0, 4237.0], [180.0, 2668.0], [181.0, 2848.0], [182.0, 2775.6666666666665], [183.0, 3269.75], [179.0, 2320.0], [178.0, 2200.0], [184.0, 3033.0], [185.0, 2788.0], [188.0, 2991.25], [190.0, 2999.0], [191.0, 3174.5], [189.0, 2418.0], [187.0, 4650.0], [186.0, 2312.0], [193.0, 3101.0], [194.0, 3332.3333333333335], [198.0, 4094.6666666666665], [199.0, 3979.5], [197.0, 4702.0], [196.0, 4703.0], [195.0, 4626.0], [200.0, 3777.6666666666665], [204.0, 3909.0], [205.0, 3944.0], [207.0, 4770.0], [206.0, 4768.0], [203.0, 2468.0], [202.0, 4770.0], [201.0, 4694.0], [210.0, 3934.5], [211.0, 3924.0], [214.0, 3409.25], [215.0, 2491.0], [213.0, 2500.0], [212.0, 2495.5], [209.0, 4752.0], [208.0, 4750.0], [216.0, 3493.3333333333335], [217.0, 3246.5], [220.0, 3365.0], [223.0, 2591.0], [222.0, 2593.0], [221.0, 4756.0], [219.0, 2527.0], [218.0, 2571.0], [225.0, 3533.0], [229.0, 4540.25], [231.0, 4395.666666666667], [230.0, 4834.0], [228.0, 4738.0], [226.0, 2581.0], [224.0, 2589.0], [235.0, 4307.333333333333], [239.0, 4031.0], [238.0, 2516.0], [237.0, 4785.0], [236.0, 4786.0], [234.0, 4790.0], [233.0, 4799.0], [232.0, 4825.0], [240.0, 3049.0], [242.0, 4903.666666666667], [244.0, 4336.0], [245.0, 4026.0], [247.0, 3865.5], [246.0, 4218.5], [249.0, 3230.5], [250.0, 4269.2], [252.0, 3402.3333333333335], [254.0, 4243.666666666667], [255.0, 2615.5], [253.0, 2602.0], [248.0, 2667.0], [269.0, 3930.6666666666665], [258.0, 3684.5], [263.0, 4676.0], [257.0, 2608.0], [256.0, 2607.0], [262.0, 4667.0], [268.0, 2582.0], [259.0, 4685.0], [260.0, 4514.0], [261.0, 4672.0], [264.0, 4873.0], [265.0, 3688.6666666666665], [266.0, 3558.5], [267.0, 2532.0], [270.0, 4766.5], [271.0, 5322.0], [274.0, 4700.0], [273.0, 5063.0], [275.0, 4966.666666666667], [284.0, 2709.0], [277.0, 5525.0], [276.0, 2644.0], [278.0, 4773.666666666667], [279.0, 3623.5], [272.0, 4806.5], [283.0, 3982.6666666666665], [282.0, 2617.0], [281.0, 2632.0], [280.0, 2630.0], [287.0, 3977.0], [286.0, 2761.0], [285.0, 2784.0], [300.0, 4746.0], [290.0, 5397.0], [291.0, 5063.0], [292.0, 5011.0], [293.0, 5135.666666666667], [295.0, 4301.0], [289.0, 4892.0], [288.0, 4205.333333333333], [294.0, 2771.0], [297.0, 4243.666666666667], [299.0, 4294.666666666667], [298.0, 2893.0], [303.0, 4978.5], [296.0, 2838.0], [301.0, 5052.75], [302.0, 4674.0], [316.0, 4989.666666666667], [305.0, 4998.0], [304.0, 2870.0], [306.0, 3846.0], [307.0, 4141.0], [311.0, 4169.0], [310.0, 2940.0], [309.0, 2905.5], [312.0, 3929.0], [313.0, 2978.0], [315.0, 4978.0], [314.0, 4997.666666666667], [317.0, 5221.0], [319.0, 3007.0], [318.0, 2926.5], [334.0, 4992.333333333333], [320.0, 3976.0], [321.0, 4720.75], [323.0, 3048.0], [322.0, 3050.0], [333.0, 3094.0], [332.0, 3104.0], [325.0, 4945.0], [324.0, 3056.0], [326.0, 4297.0], [327.0, 6296.0], [330.0, 4643.333333333333], [331.0, 5266.5], [335.0, 4962.0], [329.0, 3079.0], [328.0, 3036.0], [350.0, 4788.666666666667], [336.0, 5476.142857142858], [337.0, 4996.0], [339.0, 3091.0], [338.0, 3082.0], [343.0, 4944.0], [342.0, 4087.5], [340.0, 4796.333333333333], [341.0, 5039.0], [345.0, 5026.166666666667], [346.0, 5912.0], [347.0, 5518.333333333333], [351.0, 4305.0], [344.0, 5005.0], [349.0, 3205.0], [348.0, 3209.0], [355.0, 4694.666666666667], [356.0, 4774.0], [357.0, 3340.0], [358.0, 5877.5], [359.0, 5209.333333333333], [354.0, 3326.0], [353.0, 3302.0], [360.0, 5330.0], [363.0, 6345.333333333333], [362.0, 5011.0], [361.0, 4940.0], [364.0, 5675.5], [365.0, 4970.0], [366.0, 5177.0], [367.0, 5467.666666666667], [371.0, 4763.5], [373.0, 6755.0], [372.0, 3279.0], [375.0, 3307.0], [368.0, 3267.0], [370.0, 3297.0], [369.0, 3334.0], [374.0, 3325.5], [376.0, 5324.5], [377.0, 6073.5], [381.0, 5807.5], [383.0, 5929.5], [382.0, 5061.0], [379.0, 4974.0], [378.0, 5041.0], [398.0, 3383.0], [386.0, 4444.333333333333], [387.0, 4674.5], [390.0, 6044.25], [389.0, 3360.0], [388.0, 4487.666666666667], [391.0, 3363.0], [384.0, 3349.0], [399.0, 3383.0], [393.0, 5032.0], [392.0, 5007.5], [397.0, 3399.0], [396.0, 3375.0], [395.0, 5083.0], [394.0, 5071.0], [412.0, 6339.75], [402.0, 5959.333333333333], [403.0, 6629.444444444445], [407.0, 5509.0], [401.0, 3437.0], [400.0, 3383.0], [406.0, 3501.0], [405.0, 3517.0], [404.0, 3529.0], [408.0, 5692.333333333333], [411.0, 6373.0], [410.0, 5021.0], [409.0, 5074.0], [413.0, 6360.2], [415.0, 3500.0], [414.0, 3496.0], [429.0, 5501.5], [417.0, 6509.25], [423.0, 6305.25], [416.0, 3444.0], [422.0, 5038.666666666667], [421.0, 5040.0], [420.0, 4256.5], [426.0, 5462.0], [428.0, 5307.0], [419.0, 5093.0], [418.0, 3497.0], [430.0, 6386.25], [431.0, 3533.0], [427.0, 3477.0], [425.0, 3555.0], [424.0, 5090.0], [446.0, 5178.5], [433.0, 5291.0], [435.0, 6357.5], [434.0, 5065.0], [437.0, 5986.0], [436.0, 3491.0], [438.0, 5661.0], [432.0, 3538.0], [441.0, 5124.0], [442.0, 5526.5], [443.0, 3445.0], [447.0, 7660.0], [440.0, 4286.5], [445.0, 3456.0], [444.0, 3429.0], [461.0, 4948.75], [451.0, 5921.0], [453.0, 5087.333333333333], [455.0, 3622.0], [448.0, 4263.0], [450.0, 5093.0], [449.0, 3529.0], [454.0, 3595.0], [456.0, 6354.333333333333], [457.0, 6511.5], [460.0, 8000.0], [462.0, 6902.333333333333], [463.0, 4369.0], [458.0, 5112.0], [476.0, 5633.0], [466.0, 6184.6], [467.0, 5969.0], [468.0, 6193.5], [469.0, 5090.0], [471.0, 5754.0], [470.0, 3665.0], [472.0, 5516.5], [473.0, 8191.0], [475.0, 3716.0], [474.0, 3707.5], [477.0, 5371.0], [478.0, 5988.0], [479.0, 5089.666666666667], [493.0, 6580.5], [481.0, 6294.5], [482.0, 6855.666666666667], [492.0, 3861.0], [483.0, 3683.0], [484.0, 5818.0], [485.0, 4763.25], [486.0, 6261.0], [487.0, 6134.0], [480.0, 4175.333333333333], [488.0, 7412.2], [491.0, 7374.75], [490.0, 3822.0], [489.0, 3735.0], [494.0, 6276.5], [495.0, 4476.5], [509.0, 5105.25], [496.0, 7004.666666666667], [498.0, 7844.25], [497.0, 5145.0], [508.0, 5142.666666666667], [499.0, 4802.5], [500.0, 9458.0], [501.0, 3839.5], [503.0, 9015.0], [502.0, 3854.0], [505.0, 5822.5], [506.0, 6300.0], [507.0, 5117.0], [510.0, 7720.25], [511.0, 3886.0], [504.0, 5144.0], [536.0, 6402.857142857143], [515.0, 5749.666666666667], [514.0, 6791.333333333333], [517.0, 5699.8], [516.0, 5148.666666666667], [518.0, 5578.0], [519.0, 6306.0], [537.0, 7919.0], [538.0, 3999.5], [539.0, 5897.666666666667], [541.0, 6228.666666666666], [540.0, 4068.0], [542.0, 5175.142857142857], [543.0, 4076.0], [528.0, 3969.0], [530.0, 3989.0], [529.0, 4036.0], [532.0, 5139.5], [531.0, 4033.0], [525.0, 7272.0], [524.0, 3897.0], [523.0, 3904.0], [522.0, 3900.0], [521.0, 4521.0], [520.0, 5165.0], [526.0, 6922.5], [527.0, 6512.5], [512.0, 3871.0], [513.0, 3906.0], [533.0, 8822.0], [534.0, 6128.0], [535.0, 5176.0], [545.0, 6911.0], [544.0, 6051.666666666667], [547.0, 6574.0], [546.0, 4446.666666666667], [549.0, 5105.0], [548.0, 5129.333333333333], [550.0, 6951.6], [554.0, 7669.2], [552.0, 5145.0], [555.0, 4072.3333333333335], [557.0, 4099.5], [556.0, 4094.0], [558.0, 5637.571428571428], [559.0, 5483.833333333334], [563.0, 6304.333333333334], [568.0, 8302.0], [551.0, 4613.0], [569.0, 5152.0], [570.0, 10166.666666666666], [571.0, 5915.25], [573.0, 5061.0], [572.0, 4175.0], [574.0, 8045.0], [575.0, 10215.0], [562.0, 5166.0], [561.0, 4616.0], [564.0, 7950.666666666667], [565.0, 4144.25], [567.0, 5156.333333333333], [566.0, 4364.166666666666], [600.0, 6441.0], [579.0, 5947.875], [576.0, 6023.8], [577.0, 4860.5], [580.0, 7426.2], [581.0, 6116.4], [583.0, 7392.25], [582.0, 5081.75], [601.0, 8858.75], [602.0, 10424.0], [604.0, 7357.0], [603.0, 5010.4], [605.0, 4268.0], [606.0, 5417.857142857143], [607.0, 4846.666666666667], [584.0, 7074.333333333333], [585.0, 4269.0], [587.0, 7656.0], [591.0, 7604.6], [590.0, 5157.0], [589.0, 4529.6], [588.0, 5646.0], [593.0, 6024.2], [597.0, 7239.75], [596.0, 4239.0], [595.0, 4180.0], [594.0, 4213.0], [599.0, 5120.0], [598.0, 4301.0], [612.0, 9526.25], [611.0, 8628.0], [610.0, 5155.5], [609.0, 4236.0], [608.0, 4207.0], [623.0, 4649.4], [622.0, 4275.6], [621.0, 4738.0], [614.0, 6363.666666666667], [613.0, 5204.0], [615.0, 6328.666666666667], [616.0, 6714.8], [617.0, 6632.0], [619.0, 7480.5], [618.0, 5110.0], [620.0, 7438.5], [624.0, 8168.8], [639.0, 7944.0], [638.0, 4603.333333333333], [634.0, 7068.333333333333], [636.0, 5008.6], [635.0, 5162.0], [637.0, 7641.0], [632.0, 7416.5], [633.0, 8476.333333333334], [625.0, 7870.0], [627.0, 6791.333333333333], [626.0, 4565.857142857142], [628.0, 5458.428571428572], [629.0, 9611.0], [631.0, 4348.0], [630.0, 4370.5], [646.0, 5886.0], [642.0, 9190.5], [641.0, 4880.333333333333], [645.0, 4661.916666666667], [643.0, 4946.0], [647.0, 5747.6], [665.0, 4944.666666666667], [664.0, 4822.0], [666.0, 7001.333333333334], [670.0, 7728.0], [669.0, 4419.75], [668.0, 4435.0], [667.0, 5270.0], [671.0, 8190.0], [651.0, 6971.333333333333], [650.0, 4684.666666666667], [649.0, 4931.0], [648.0, 5255.0], [652.0, 9031.666666666666], [653.0, 7886.5], [654.0, 4699.0], [655.0, 8309.5], [656.0, 10297.0], [657.0, 7705.0], [658.0, 4371.5], [660.0, 5234.0], [659.0, 5212.0], [661.0, 7883.5], [662.0, 7123.5], [663.0, 5196.0], [696.0, 9355.428571428572], [685.0, 5863.900000000001], [675.0, 8567.75], [673.0, 4448.5], [672.0, 4420.333333333333], [676.0, 7125.666666666667], [677.0, 8366.5], [679.0, 4444.0], [678.0, 4445.25], [700.0, 7523.142857142857], [699.0, 4509.0], [698.0, 4530.0], [697.0, 4927.333333333333], [701.0, 8988.0], [702.0, 7035.25], [703.0, 4895.4], [688.0, 4841.0], [680.0, 11456.0], [681.0, 7043.571428571428], [682.0, 6796.083333333334], [683.0, 4476.5], [686.0, 9433.166666666668], [687.0, 5153.333333333333], [689.0, 11125.0], [690.0, 8819.75], [691.0, 4810.666666666667], [692.0, 8275.5], [693.0, 8132.0], [695.0, 8163.0], [694.0, 5234.0], [706.0, 7131.0], [705.0, 9728.75], [704.0, 4513.0], [710.0, 8056.5], [709.0, 5162.0], [708.0, 4858.5], [707.0, 4987.4], [711.0, 6175.125], [712.0, 8691.0], [713.0, 4583.0], [714.0, 9979.4], [718.0, 6054.133333333334], [717.0, 4976.666666666667], [716.0, 4621.875], [715.0, 4545.0], [719.0, 9227.666666666666], [722.0, 6308.666666666667], [721.0, 5272.666666666666], [720.0, 5432.0], [732.0, 9553.833333333334], [734.0, 5161.5], [733.0, 5180.5], [735.0, 5249.5], [729.0, 8661.5], [728.0, 4622.0], [730.0, 4627.0], [731.0, 7733.857142857143], [723.0, 9788.75], [727.0, 9370.125], [726.0, 5262.0], [725.0, 4653.0], [724.0, 4792.142857142858], [760.0, 7240.833333333334], [737.0, 5830.428571428572], [736.0, 8283.0], [738.0, 8074.5], [740.0, 5248.0], [739.0, 4963.25], [741.0, 9137.0], [742.0, 8761.000000000002], [743.0, 5104.2], [761.0, 5981.866666666668], [762.0, 5028.0], [763.0, 5950.111111111111], [765.0, 8704.666666666666], [764.0, 5042.25], [767.0, 4972.0], [766.0, 5061.0], [746.0, 9120.857142857143], [745.0, 4889.437500000001], [744.0, 5249.0], [747.0, 4686.0], [749.0, 5044.666666666667], [748.0, 4686.0], [750.0, 6027.777777777777], [751.0, 9188.0], [752.0, 7455.2], [753.0, 13011.0], [755.0, 5074.666666666667], [754.0, 4942.4], [756.0, 9486.0], [759.0, 5153.555555555555], [758.0, 5116.0], [770.0, 10334.25], [769.0, 5964.5625], [768.0, 4771.0], [771.0, 10310.0], [773.0, 4868.833333333333], [772.0, 5335.0], [774.0, 9809.0], [775.0, 7486.666666666666], [792.0, 4983.0], [793.0, 8791.166666666668], [794.0, 5759.8], [796.0, 5097.75], [795.0, 5182.2307692307695], [797.0, 9694.0], [798.0, 6503.5], [799.0, 5077.0], [779.0, 9509.285714285716], [778.0, 5142.333333333333], [777.0, 4978.749999999999], [776.0, 4773.0], [780.0, 4775.6], [781.0, 9954.333333333334], [782.0, 6458.727272727273], [783.0, 5114.0], [784.0, 11280.666666666666], [787.0, 6963.75], [785.0, 5055.5], [788.0, 7137.0], [790.0, 9200.0], [789.0, 4880.0], [791.0, 5044.416666666667], [807.0, 6933.076923076924], [803.0, 6635.2], [802.0, 9047.25], [801.0, 5189.923076923077], [800.0, 5074.0], [804.0, 8188.666666666667], [805.0, 6637.833333333333], [806.0, 7032.5], [816.0, 7114.666666666668], [830.0, 7285.75], [829.0, 5307.875], [828.0, 5294.0], [831.0, 6710.999999999999], [826.0, 7430.545454545455], [827.0, 7124.6], [824.0, 6636.727272727273], [825.0, 8651.857142857143], [817.0, 6093.0], [820.0, 9934.666666666666], [819.0, 5314.272727272727], [818.0, 5326.2307692307695], [821.0, 9069.5], [822.0, 6751.5], [823.0, 6050.916666666667], [811.0, 8526.272727272728], [810.0, 5149.0], [809.0, 5230.375], [808.0, 5238.636363636364], [812.0, 6152.588235294117], [815.0, 6358.699999999999], [814.0, 5213.0], [813.0, 5198.666666666667], [835.0, 12785.6], [832.0, 6052.9047619047615], [834.0, 5521.0], [833.0, 5454.0], [836.0, 6879.933333333333], [838.0, 5535.0], [837.0, 5349.333333333333], [856.0, 5677.0], [839.0, 5406.25], [857.0, 6663.857142857142], [858.0, 7509.875], [859.0, 5678.0], [861.0, 5499.285714285715], [860.0, 5612.0], [862.0, 7842.899999999999], [863.0, 5519.454545454545], [848.0, 5446.5], [841.0, 6150.0], [840.0, 5338.666666666667], [842.0, 6334.1875], [845.0, 9706.111111111111], [844.0, 5454.071428571429], [843.0, 5405.9], [846.0, 5422.333333333333], [847.0, 5635.5], [849.0, 9040.0], [851.0, 10774.0], [850.0, 5527.5], [852.0, 9950.5], [855.0, 6198.7], [854.0, 5534.0], [853.0, 5404.0], [890.0, 6319.6], [867.0, 7971.500000000001], [866.0, 13234.333333333334], [865.0, 5477.4], [864.0, 5712.5], [879.0, 5588.5], [878.0, 5485.25], [870.0, 6130.5], [869.0, 5742.0], [868.0, 5556.625000000001], [871.0, 7548.625000000001], [872.0, 6680.307692307692], [874.0, 5564.411764705883], [873.0, 5585.0], [875.0, 6536.571428571428], [876.0, 6640.695652173913], [877.0, 6827.714285714286], [880.0, 11380.5], [891.0, 11180.666666666666], [892.0, 5747.444444444444], [894.0, 5604.666666666667], [893.0, 5471.333333333333], [895.0, 11982.6], [889.0, 7951.75], [888.0, 5580.9333333333325], [881.0, 6028.358974358975], [884.0, 9588.0], [883.0, 5634.333333333334], [882.0, 5630.0], [885.0, 9693.0], [887.0, 8162.666666666667], [886.0, 5665.5], [900.0, 6412.31818181818], [907.0, 9833.5], [896.0, 6890.947368421053], [899.0, 5758.142857142858], [898.0, 5598.111111111111], [897.0, 5659.0], [911.0, 8084.428571428572], [901.0, 7794.909090909091], [903.0, 5659.8823529411775], [902.0, 5689.769230769231], [920.0, 6928.4], [921.0, 8617.0], [923.0, 5641.903225806453], [922.0, 5481.2], [924.0, 5934.969696969697], [925.0, 7235.2692307692305], [927.0, 5538.333333333334], [912.0, 5986.5], [914.0, 5572.0], [913.0, 5789.375000000001], [926.0, 5620.935483870969], [915.0, 9575.75], [916.0, 10534.857142857143], [918.0, 5731.333333333336], [904.0, 6957.916666666667], [905.0, 9749.5], [906.0, 6735.294117647059], [909.0, 6318.076923076924], [908.0, 5453.111111111111], [910.0, 7025.76], [954.0, 7344.766666666666], [930.0, 7596.117647058825], [929.0, 12088.8], [928.0, 5743.875], [933.0, 5907.615384615384], [932.0, 6053.75], [931.0, 5796.0], [934.0, 7191.409090909089], [938.0, 11068.666666666666], [937.0, 5749.5641025641025], [936.0, 5767.380952380952], [939.0, 8648.27777777778], [942.0, 6494.294117647058], [941.0, 5763.333333333334], [940.0, 5452.333333333333], [943.0, 11682.57142857143], [944.0, 8545.0], [946.0, 5656.200000000001], [945.0, 6333.0], [959.0, 8156.16666666667], [955.0, 7378.733333333333], [957.0, 7619.750000000001], [956.0, 7207.411764705882], [958.0, 10202.384615384617], [953.0, 6461.4], [952.0, 6008.375], [935.0, 5264.0], [947.0, 6220.7777777777765], [948.0, 8057.0], [949.0, 6584.285714285715], [950.0, 7392.545454545454], [951.0, 6490.5], [967.0, 12230.909090909092], [973.0, 11663.514285714286], [960.0, 9093.75], [961.0, 8269.677419354839], [962.0, 9008.971428571427], [963.0, 11110.555555555555], [964.0, 9326.117647058825], [966.0, 10326.104166666664], [965.0, 9146.57142857143], [976.0, 12570.315789473683], [990.0, 14903.277777777777], [991.0, 15800.799999999997], [986.0, 14200.3125], [988.0, 14592.0], [987.0, 14299.666666666668], [989.0, 14634.76923076923], [984.0, 13942.562500000002], [985.0, 13876.62162162162], [977.0, 13322.166666666668], [980.0, 13440.652173913042], [979.0, 13111.777777777776], [978.0, 13214.437499999998], [981.0, 13714.25], [983.0, 13163.5], [982.0, 13872.060606060606], [968.0, 11530.441176470587], [970.0, 10718.888888888889], [969.0, 12563.0], [971.0, 12832.333333333334], [972.0, 13143.0], [975.0, 12576.260869565218], [974.0, 11775.697674418601], [994.0, 15242.85], [995.0, 15099.224137931034], [996.0, 14818.010309278348], [997.0, 14591.052631578947], [993.0, 15397.157894736847], [992.0, 15778.979166666664], [1.0, 2281.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[755.1015999999997, 7848.13900000002]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 997.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 20342.4, "minX": 1.72604856E12, "maxY": 77474.26666666666, "series": [{"data": [[1.72604856E12, 41719.933333333334], [1.72604862E12, 23685.15]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72604856E12, 20342.4], [1.72604862E12, 77474.26666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72604862E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 7019.982456140375, "minX": 1.72604856E12, "maxY": 10703.952846975104, "series": [{"data": [[1.72604856E12, 10703.952846975104], [1.72604862E12, 7019.982456140375]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72604862E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 7019.92621259028, "minX": 1.72604856E12, "maxY": 10703.892348754453, "series": [{"data": [[1.72604856E12, 10703.892348754453], [1.72604862E12, 7019.92621259028]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72604862E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2.8304953560371495, "minX": 1.72604856E12, "maxY": 21.742882562277572, "series": [{"data": [[1.72604856E12, 21.742882562277572], [1.72604862E12, 2.8304953560371495]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72604862E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 525.0, "minX": 1.72604856E12, "maxY": 17537.0, "series": [{"data": [[1.72604856E12, 16722.0], [1.72604862E12, 17537.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72604856E12, 15163.5], [1.72604862E12, 13925.2]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72604856E12, 16031.0], [1.72604862E12, 16138.220000000001]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72604856E12, 15418.0], [1.72604862E12, 15235.499999999996]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72604856E12, 562.0], [1.72604862E12, 525.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72604856E12, 12080.0], [1.72604862E12, 5437.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72604862E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 884.0, "minX": 5.0, "maxY": 15933.0, "series": [{"data": [[32.0, 11616.5], [33.0, 13178.0], [37.0, 12486.0], [36.0, 13635.5], [41.0, 13410.0], [40.0, 15933.0], [42.0, 12263.0], [45.0, 2911.0], [47.0, 14580.0], [46.0, 14211.5], [51.0, 15250.0], [52.0, 15194.5], [54.0, 15273.0], [5.0, 884.0], [93.0, 3744.0], [155.0, 15613.0], [154.0, 14306.5], [166.0, 5517.0], [163.0, 5289.5], [167.0, 5822.0], [175.0, 13075.0], [169.0, 11854.0], [174.0, 5199.5], [180.0, 9543.5], [179.0, 5483.0], [177.0, 5504.0], [183.0, 5420.0], [178.0, 5063.0], [184.0, 5358.5], [188.0, 5045.5], [187.0, 2940.0], [18.0, 1104.0], [19.0, 2045.0], [20.0, 3859.5], [21.0, 3730.5], [22.0, 7288.0], [24.0, 9898.0], [25.0, 5256.0], [26.0, 5425.5], [27.0, 10285.0], [28.0, 6392.5], [29.0, 4598.0], [30.0, 8769.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 188.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 884.0, "minX": 5.0, "maxY": 15933.0, "series": [{"data": [[32.0, 11616.5], [33.0, 13178.0], [37.0, 12486.0], [36.0, 13635.5], [41.0, 13410.0], [40.0, 15933.0], [42.0, 12263.0], [45.0, 2911.0], [47.0, 14580.0], [46.0, 14211.5], [51.0, 15250.0], [52.0, 15194.5], [54.0, 15273.0], [5.0, 884.0], [93.0, 3744.0], [155.0, 15613.0], [154.0, 14306.5], [166.0, 5517.0], [163.0, 5289.5], [167.0, 5822.0], [175.0, 13075.0], [169.0, 11854.0], [174.0, 5199.5], [180.0, 9543.5], [179.0, 5483.0], [177.0, 5504.0], [183.0, 5420.0], [178.0, 5062.5], [184.0, 5358.5], [188.0, 5045.5], [187.0, 2940.0], [18.0, 1104.0], [19.0, 2045.0], [20.0, 3858.5], [21.0, 3730.5], [22.0, 7288.0], [24.0, 9897.5], [25.0, 5256.0], [26.0, 5425.5], [27.0, 10285.0], [28.0, 6392.5], [29.0, 4598.0], [30.0, 8769.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 188.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 35.266666666666666, "minX": 1.72604856E12, "maxY": 48.06666666666667, "series": [{"data": [[1.72604856E12, 35.266666666666666], [1.72604862E12, 48.06666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72604862E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 18.733333333333334, "minX": 1.72604856E12, "maxY": 64.6, "series": [{"data": [[1.72604856E12, 18.733333333333334], [1.72604862E12, 64.6]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72604862E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 18.733333333333334, "minX": 1.72604856E12, "maxY": 64.6, "series": [{"data": [[1.72604856E12, 18.733333333333334], [1.72604862E12, 64.6]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72604862E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 18.733333333333334, "minX": 1.72604856E12, "maxY": 64.6, "series": [{"data": [[1.72604856E12, 18.733333333333334], [1.72604862E12, 64.6]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72604862E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

